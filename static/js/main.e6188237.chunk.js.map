{"version":3,"sources":["components/Home.js","components/About.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Fragment","About","NotFound","Nav","Object","styled_base_browser_esm","target","name","styles","MainContainer","App","core_browser_esm","_ref","className","es","to","Home_Home","path","About_About","NotFound_NotFound","default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAEaA,EAAO,kBAClBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,iQCHSE,EAAQ,kBACnBJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,sPCHSG,EAAW,kBACtBL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,6BCIEI,EAAGC,OAAAC,EAAA,EAAAD,CAAA,OAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,SAAAC,OAAA,qHAmBHC,EAAaL,OAAAC,EAAA,EAAAD,CAAA,WAAAE,OAAA,YAAAF,CAAA,CAAAG,KAAA,UAAAC,OAAA,2GA0CJE,mLAlCX,OACEb,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEH,OAAMI,IAORf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAACI,EAAD,KACEN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFlB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAG,SAAT,YAINlB,EAAAC,EAAAC,cAACU,EAAD,KACEZ,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACEjB,EAAAC,EAAAC,cAACiB,EAAD,CAAMC,KAAK,MACXpB,EAAAC,EAAAC,cAACmB,EAAD,CAAOD,KAAK,YACZpB,EAAAC,EAAAC,cAACoB,EAAD,CAAUC,SAAO,eA3BbC,aCtBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e6188237.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Home = () => (\n  <>\n    <h3>Home</h3>\n    <p>\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Consequatur maiores quasi repellendus\n      a debitis, quae doloribus! Sapiente dicta, omnis officia beatae voluptatum adipisci architecto\n      tempore deserunt laborum. Itaque, aspernatur! Enim.'\n    </p>\n  </>\n)\n","import React from 'react'\n\nexport const About = () => (\n  <>\n    <h3>About</h3>\n    <p>\n      Lorem, ipsum dolor sit amet consectetur adipisicing elit. Soluta, eum eveniet odio\n      dignissimos, aperiam ipsum maxime, sunt totam nulla fugit possimus quae necessitatibus\n      repellat molestiae accusamus culpa voluptatum laudantium sed!\n    </p>\n  </>\n)\n","import React from 'react'\n\nexport const NotFound = () => (\n  <>\n    <h1>404 Not found naja</h1>\n    <p>This is a book</p>\n  </>\n)\n","import React, { Component } from 'react'\nimport { Router, Link } from '@reach/router'\nimport styled from '@emotion/styled/macro'\nimport css from '@emotion/css/macro'\nimport { Global } from '@emotion/core'\nimport { Home } from './components/Home'\nimport { About } from './components/About'\nimport { NotFound } from './components/NotFound'\n\nconst Nav = styled.nav`\n  > ul {\n    list-style: none;\n    display: flex;\n\n    > li ~ li {\n      margin-left: 10px;\n    }\n  }\n\n  a {\n    text-decoration: none;\n\n    &:visited {\n      color: inherit;\n    }\n  }\n`\n\nconst MainContainer = styled.section`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Global\n          styles={css`\n            html,\n            body {\n              color: #444;\n            }\n          `}\n        />\n        <div className=\"App\">\n          <Nav>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"about\">About</Link>\n              </li>\n            </ul>\n          </Nav>\n          <MainContainer>\n            <Router>\n              <Home path=\"/\" />\n              <About path=\"about/*\" />\n              <NotFound default />\n            </Router>\n          </MainContainer>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}